type Balance {
  confirmed: String!
  unconfirmed: String!
}

type Transaction {
  id: String!
  status: String!
  confirmations: Int!
  timestamp: Int!
  fee: String!
  link: String!
  to: [String!]!
  from: String!
  amount: String!
  type: String!
  total: String!
}

type FeeEstimate {
  estimatedFee: String!
  feeCurrency: String!
  feeCurrencyBalance: String!
}

type Wallet {
  symbol: String!
  name: String!
  balance: Balance!
  icon: String!
  backgroundColor: String!
  receiveAddress: String!
  transactions: [Transaction!]!
  feeEstimate: FeeEstimate!
  contractAddress: String
}

type MutationResponse {
  success: Boolean!
  message: String
}

type TxSendResponse {
  success: Boolean!
  message: String
  transaction: Transaction
}

type Query {
  # If no coinSymbol is provided, all supported wallets will be returned
  wallet(coinSymbol: String): [Wallet!]!
  mnemonic(lang: String): String!
}

input SendOutput {
  to: String!
  amount: String!
}

type Mutation {
  # If no coinSymbol is provided, all supported wallets will be returned
  sendTransaction(
    coinSymbol: String
    outputs: [SendOutput!]!
    totpToken: String
    walletPassword: String
  ): TxSendResponse!
  createWallet(mnemonic: String!, walletPassword: String): MutationResponse!
  recoverWallet(mnemonic: String!, newPassword: String!): MutationResponse!
}
