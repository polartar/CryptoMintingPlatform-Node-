type UserProfile {
  email: String!
  firstName: String!
  lastName: String!
  displayName: String
  phone: String
  phoneCountry: String
  id: ID!
  created: Date!
  currency: String!
  profilePhotoUrl: String
  language: String
  communicationConsent: [CommunicationConsent]
  role: String!
  number: String
  emailVerified: Date
  secondaryEmail: String
  twoFaEnabled: Boolean
  twoFaAuthenticated: Boolean
  walletExists: Boolean!
  twoFaSecret: String
  twoFaQrCode: String
  userIds: UserIds
  activationTermsAndConditions: [ActivationTermsAndConditions]
  gender: String
  dateOfBirth: Date
  country: String
  countryCode: String
  countryPhoneCode: String
  clinic: String
  careclixId: String
  street: String
  city: String
  state: String
  zipCode: String
}

type UserIds {
  connectUserId: String
  arcadeUserId: String
  greenUserId: String
  codexUserId: String
  blueUserId: String
}

type ActivationTermsAndConditions {
  timestamp: Date
  ipAddress: String
  text: String
}

type CommunicationConsent {
  timestamp: Date
  consentGiven: Boolean
}

input CreateUserInput {
  email: String
  password: String
  token: String
  firstName: String!
  lastName: String!
  displayName: String
  profilePhotoFilename: String
  communicationConsent: [CommunicationConsentInput]
  phone: String
  referredBy: String
  language: String
  referralContext: OrderContext
  activationTermsAndConditions: [ActivationTermsAndConditionsInput]!
  gender: String
  dateOfBirth: Date
  country: String
  countryCode: String
  countryPhoneCode: String
  clinic: String
  careclixId: String
  street: String
  city: String
  state: String
  zipCode: String
}

input ActivationTermsAndConditionsInput {
  timestamp: Date!
  ipAddress: String!
  text: String!
}

input CommunicationConsentInput {
  timestamp: Date
  consentGiven: Boolean
}

input UpdateUserInput {
  firstName: String
  lastName: String
  displayName: String
  profilePhotoFilename: String
  communicationConsent: [CommunicationConsentInput]
  phone: String
  email: String
  password: String
  secondaryEmail: String
  language: String
  updateUserNumber: Boolean
  activationTermsAndConditions: [ActivationTermsAndConditionsInput]
  gender: String
  dateOfBirth: Date
  country: String
  countryCode: String
  countryPhoneCode: String
  clinic: String
  careclixId: String
  street: String
  city: String
  state: String
  zipCode: String
}

input AcceptAgreementsInput {
  privacyPolicy: Boolean
  termsAndConditions: Boolean
  ipAddress: String
}

type UpdateUserResponse {
  success: Boolean
  user: UserProfile
}

type IsDisplayNameUniqueResponse {
  unique: Boolean!
}

type NeededAgreementsResponse {
  agreementNames: [String]!
}

type Query {
  profile: UserProfile!
  isDisplayNameUnique(displayName: String!): IsDisplayNameUniqueResponse!
  neededAgreements: NeededAgreementsResponse!
}

type Mutation {
  createUser(userInfo: CreateUserInput!, ipAddress: String): ReturnToken!
  updateUser(userInfo: UpdateUserInput!): UpdateUserResponse!
  unsubscribe(userId: String!, emailList: String!): MutationResponse!
  acceptAgreements(agreementInfo: AcceptAgreementsInput!): MutationResponse!
  sendVerifyEmail(newAccount: Boolean): MutationResponse!
  verifyEmailAddress(token: String!): MutationResponse!
}
