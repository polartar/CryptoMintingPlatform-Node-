input BuySellCoinInput {
  buyingCoin: String!
  quantity: Float
  sellingCoin: String!
  price: Float
}
type Conversion {
  buyingCoin: String!
  quantity: Float
  sellingCoin: String!
  price: Float!
  fees: Float
  expires: Date!
}
input CompletedInput {
  from_uuid: String
  limit: Float
}
enum Status {
  CONVERTING
  COMPLETE
}
type Tick {
  base: String!
  rel: String!
  token_id: String
  symbol: String!
  lastPrice: Float!
  timestamp: Float!
}
type Symbol {
  base: String!
  rel: String!
  symbol: String!
  decimals: Float
  precision: Float
  last: Float!
  lastPrice: Float
  timestamp: Float!
}
type Market {
  coin: String!
  relationships: [Symbol!]
  timestamp: Float!
}
type OrderStatus {
  orderId: String!
  status: Status!
  bought: Float
  sold: Float
  price: Float
  quantity: Float
}

type OpenOrderItem {
  orderId: String!
  quantity: String!
  name: String!
  description: String!
  image: String!
  price: Float!
  timestamp: Date!
}

input BuyItem {
  itemId: String!
  sellingCoin: String!
  buyingCoin: String!
  quantity: Float
  price: Float
}

input SellItem {
  itemId: String!
  price: Float!
  quantity: Float
  sellingCoin: String!
  buyingCoin: String!
}
type CoinResponse {
  address: String!
  ticker: String!
}

type ConvertQueries {
  status(orderId: String!): Status!
  pricesAndFees(buySellCoin: BuySellCoinInput!): Conversion!
  completed(filter: CompletedInput): [OrderStatus!]
  pending: [OrderStatus!]
  coins: [CoinResponse!]!
  markets: [Market!]!
  ticks: [Tick!]!
}
type ConvertMutations {
  coin(buySellCoin: BuySellCoinInput!, walletPassword: String!): OrderStatus!
  cancel(orderId: String!, walletPassword: String!): OrderStatus!
}
type ItemQueries {
  items(buySellCoin: BuySellCoinInput!): [OpenOrderItem!]
  buyStatus(orderId: String!): OrderStatus!
  sellStatus(orderId: String!): OrderStatus!
}
type ItemMutations {
  buy(buyItem: BuyItem!, walletPassword: String!): OrderStatus!
  sell(sellItem: SellItem!, walletPassword: String!): OrderStatus!
  sellMany(sellItem: [SellItem!]!, walletPassword: String!): [OrderStatus!]!
  cancel(orderId: String!, walletPassword: String!): OrderStatus!
}
input GetPriceInput {
  base: String!
  token_id: String
  rel: String!
  quantity_base: Float
  buy_or_sell: String!
}
type Price {
  base: String!
  rel: String!
  token_id: String
  symbol: String!
  price: Float!
  quantity: Float
  timestamp: Int!
  usdValue: Float!
}
type Fee {
  coin: String!
  amount: Float!
  usdAmount: Float
  token_id: String
}
type GetPriceResponse {
  price: Price!
  fees: Fee!
}
type Query {
  markets: [Market!]!
  ticks: [Tick!]!
  status(orderId: String!): Status!
  pricesAndFees(getPriceInput: GetPriceInput!): GetPriceResponse!
  completed(filter: CompletedInput): [OrderStatus!]
  pending: [OrderStatus!]
  coins: [CoinResponse!]!
  items(buySellCoin: BuySellCoinInput!): [OpenOrderItem!]
  buyStatus(orderId: String!): OrderStatus!
  sellStatus(orderId: String!): OrderStatus!
}
type Mutation {
  coin(buySellCoin: BuySellCoinInput!, walletPassword: String!): OrderStatus!
  cancelConvert(orderId: String!, walletPassword: String!): OrderStatus!
  buy(buyItem: BuyItem!, walletPassword: String!): OrderStatus!
  sell(sellItem: SellItem!, walletPassword: String!): OrderStatus!
  sellMany(sellItem: [SellItem!]!, walletPassword: String!): [OrderStatus!]!
  cancelItem(orderId: String!, walletPassword: String!): OrderStatus!
}
