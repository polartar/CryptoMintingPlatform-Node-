type Vault {
  symbol: String!
  name: String!
  icon: String!
  contractAddress: String!
  balance: Float!
  fees: VaultGasFee!
}

type VaultTransaction {
  userId: String!
  symbol: String!
  tokenId: String
  isNft: Boolean!
  amount: Float!
  created: Date!
  status: String!
  dateMint: Date
  txMint: String
}

type VaultGasFee {
  symbolToMint: String!
  symbolAcceptFee: String!
  amount: Float!
  expires: Date!
  name: String!
}

enum StatusResponse {
  Success
  Error
}

enum ErrorResponseCode {
  InvalidEncryptionPassword
  BlockchainError
  InternalError
}

type ErrorResponse {
  message: String!
  code: String!
}

type VaultRetrieveResponse {
  data: VaultRetrieveResponseData
  error: ErrorResponse
  status: StatusResponse!
}

type VaultRetrieveResponseData {
  symbol: String!
  amount: Float!
  transactionId: String!
}

type Mutation {
  vault: [Vault]!
  vaultGas(coinSymbol: String!): VaultGasFee!
  vaultTransactions(coinSymbol: String!, filterType: String): [VaultTransaction]
  vaultRetrieve(symbol: String!, amount: Float!, encryptionPasscode: String!): VaultRetrieveResponse!
}+-