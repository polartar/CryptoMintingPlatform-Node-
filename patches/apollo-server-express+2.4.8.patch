diff --git a/node_modules/apollo-server-express/dist/ApolloServer.d.ts b/node_modules/apollo-server-express/dist/ApolloServer.d.ts
index 09561a4..1cd8f9b 100644
--- a/node_modules/apollo-server-express/dist/ApolloServer.d.ts
+++ b/node_modules/apollo-server-express/dist/ApolloServer.d.ts
@@ -1,29 +1,29 @@
-import express from 'express';
-import corsMiddleware from 'cors';
+import * as express from 'express';
+import * as corsMiddleware from 'cors';
 import { OptionsJson } from 'body-parser';
 import { GraphQLOptions, ApolloServerBase, ContextFunction, Context, Config } from 'apollo-server-core';
 export { GraphQLOptions, GraphQLExtension } from 'apollo-server-core';
 export interface ServerRegistration {
-    app: express.Application;
-    path?: string;
-    cors?: corsMiddleware.CorsOptions | boolean;
-    bodyParserConfig?: OptionsJson | boolean;
-    onHealthCheck?: (req: express.Request) => Promise<any>;
-    disableHealthCheck?: boolean;
+  app: express.Application;
+  path?: string;
+  cors?: corsMiddleware.CorsOptions | boolean;
+  bodyParserConfig?: OptionsJson | boolean;
+  onHealthCheck?: (req: express.Request) => Promise<any>;
+  disableHealthCheck?: boolean;
 }
 export interface ExpressContext {
-    req: express.Request;
-    res: express.Response;
+  req: express.Request;
+  res: express.Response;
 }
 export interface ApolloServerExpressConfig extends Config {
-    context?: ContextFunction<ExpressContext, Context> | Context;
+  context?: ContextFunction<ExpressContext, Context> | Context;
 }
 export declare class ApolloServer extends ApolloServerBase {
-    constructor(config: ApolloServerExpressConfig);
-    createGraphQLServerOptions(req: express.Request, res: express.Response): Promise<GraphQLOptions>;
-    protected supportsSubscriptions(): boolean;
-    protected supportsUploads(): boolean;
-    applyMiddleware({ app, path, cors, bodyParserConfig, disableHealthCheck, onHealthCheck, }: ServerRegistration): void;
+  constructor(config: ApolloServerExpressConfig);
+  createGraphQLServerOptions(req: express.Request, res: express.Response): Promise<GraphQLOptions>;
+  protected supportsSubscriptions(): boolean;
+  protected supportsUploads(): boolean;
+  applyMiddleware({ app, path, cors, bodyParserConfig, disableHealthCheck, onHealthCheck, }: ServerRegistration): void;
 }
 export declare const registerServer: () => never;
 //# sourceMappingURL=ApolloServer.d.ts.map
\ No newline at end of file
